/**
 * Generated by orval v7.14.0 üç∫
 * Do not edit manually.
 * Mnemos API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

export interface Def0 {
  message: string;
  code?: string;
  details?: unknown;
}

export type GetHealth200 = {
  ok: boolean;
  ts: string;
};

export type GetRecords200ItemContent = string | null;

export type GetRecords200Item = {
  id: string;
  title: string;
  content: GetRecords200ItemContent;
  createdAt: string;
  updatedAt: string;
};

export type CreateRecordBodyContent = string | null;

export type CreateRecordBody = {
  /** @minLength 1 */
  title: string;
  content?: CreateRecordBodyContent;
};

export type CreateRecord201Content = string | null;

export type CreateRecord201 = {
  id: string;
  title: string;
  content: CreateRecord201Content;
  createdAt: string;
  updatedAt: string;
};

export type UpdateRecordBodyContent = string | null;

export type UpdateRecordBody = {
  /** @minLength 1 */
  title?: string;
  content?: UpdateRecordBodyContent;
};

export type UpdateRecord200Content = string | null;

export type UpdateRecord200 = {
  id: string;
  title: string;
  content: UpdateRecord200Content;
  createdAt: string;
  updatedAt: string;
};

export type DeleteRecord200 = {
  ok: boolean;
};

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * @summary Health check
 */
export const getHealth = (options?: AxiosRequestConfig): Promise<AxiosResponse<GetHealth200>> => {
  return axios.get(`/api/health`, options);
};

export const getGetHealthQueryKey = () => {
  return [`/api/health`] as const;
};

export const getGetHealthQueryOptions = <
  TData = Awaited<ReturnType<typeof getHealth>>,
  TError = AxiosError<Def0 | Def0 | Def0 | Def0 | Def0 | Def0>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetHealthQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getHealth>>> = ({ signal }) =>
    getHealth({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getHealth>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetHealthQueryResult = NonNullable<Awaited<ReturnType<typeof getHealth>>>;
export type GetHealthQueryError = AxiosError<Def0 | Def0 | Def0 | Def0 | Def0 | Def0>;

/**
 * @summary Health check
 */

export function useGetHealth<
  TData = Awaited<ReturnType<typeof getHealth>>,
  TError = AxiosError<Def0 | Def0 | Def0 | Def0 | Def0 | Def0>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetHealthQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary List records
 */
export const getRecords = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetRecords200Item[]>> => {
  return axios.get(`/api/records`, options);
};

export const getGetRecordsQueryKey = () => {
  return [`/api/records`] as const;
};

export const getGetRecordsQueryOptions = <
  TData = Awaited<ReturnType<typeof getRecords>>,
  TError = AxiosError<Def0 | Def0 | Def0 | Def0 | Def0 | Def0>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getRecords>>, TError, TData>;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRecordsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRecords>>> = ({ signal }) =>
    getRecords({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRecords>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetRecordsQueryResult = NonNullable<Awaited<ReturnType<typeof getRecords>>>;
export type GetRecordsQueryError = AxiosError<Def0 | Def0 | Def0 | Def0 | Def0 | Def0>;

/**
 * @summary List records
 */

export function useGetRecords<
  TData = Awaited<ReturnType<typeof getRecords>>,
  TError = AxiosError<Def0 | Def0 | Def0 | Def0 | Def0 | Def0>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getRecords>>, TError, TData>;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetRecordsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Create record
 */
export const createRecord = (
  createRecordBody: CreateRecordBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CreateRecord201>> => {
  return axios.post(`/api/records`, createRecordBody, options);
};

export const getCreateRecordMutationOptions = <
  TError = AxiosError<Def0 | Def0 | Def0 | Def0 | Def0 | Def0>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createRecord>>,
    TError,
    { data: CreateRecordBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createRecord>>,
  TError,
  { data: CreateRecordBody },
  TContext
> => {
  const mutationKey = ['createRecord'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createRecord>>,
    { data: CreateRecordBody }
  > = (props) => {
    const { data } = props ?? {};

    return createRecord(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateRecordMutationResult = NonNullable<Awaited<ReturnType<typeof createRecord>>>;
export type CreateRecordMutationBody = CreateRecordBody;
export type CreateRecordMutationError = AxiosError<Def0 | Def0 | Def0 | Def0 | Def0 | Def0>;

/**
 * @summary Create record
 */
export const useCreateRecord = <
  TError = AxiosError<Def0 | Def0 | Def0 | Def0 | Def0 | Def0>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createRecord>>,
    TError,
    { data: CreateRecordBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof createRecord>>,
  TError,
  { data: CreateRecordBody },
  TContext
> => {
  const mutationOptions = getCreateRecordMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Update record
 */
export const updateRecord = (
  id: string,
  updateRecordBody: UpdateRecordBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<UpdateRecord200>> => {
  return axios.put(`/api/records/${id}`, updateRecordBody, options);
};

export const getUpdateRecordMutationOptions = <
  TError = AxiosError<Def0 | Def0 | Def0 | Def0 | Def0 | Def0>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateRecord>>,
    TError,
    { id: string; data: UpdateRecordBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateRecord>>,
  TError,
  { id: string; data: UpdateRecordBody },
  TContext
> => {
  const mutationKey = ['updateRecord'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateRecord>>,
    { id: string; data: UpdateRecordBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateRecord(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateRecordMutationResult = NonNullable<Awaited<ReturnType<typeof updateRecord>>>;
export type UpdateRecordMutationBody = UpdateRecordBody;
export type UpdateRecordMutationError = AxiosError<Def0 | Def0 | Def0 | Def0 | Def0 | Def0>;

/**
 * @summary Update record
 */
export const useUpdateRecord = <
  TError = AxiosError<Def0 | Def0 | Def0 | Def0 | Def0 | Def0>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateRecord>>,
    TError,
    { id: string; data: UpdateRecordBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateRecord>>,
  TError,
  { id: string; data: UpdateRecordBody },
  TContext
> => {
  const mutationOptions = getUpdateRecordMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Delete record
 */
export const deleteRecord = (
  id: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<DeleteRecord200>> => {
  return axios.delete(`/api/records/${id}`, options);
};

export const getDeleteRecordMutationOptions = <
  TError = AxiosError<Def0 | Def0 | Def0 | Def0 | Def0 | Def0>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRecord>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteRecord>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ['deleteRecord'];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteRecord>>, { id: string }> = (
    props,
  ) => {
    const { id } = props ?? {};

    return deleteRecord(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteRecordMutationResult = NonNullable<Awaited<ReturnType<typeof deleteRecord>>>;

export type DeleteRecordMutationError = AxiosError<Def0 | Def0 | Def0 | Def0 | Def0 | Def0>;

/**
 * @summary Delete record
 */
export const useDeleteRecord = <
  TError = AxiosError<Def0 | Def0 | Def0 | Def0 | Def0 | Def0>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRecord>>,
    TError,
    { id: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteRecord>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteRecordMutationOptions(options);

  return useMutation(mutationOptions);
};
