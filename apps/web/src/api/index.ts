/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * Mnemos API
 * OpenAPI spec version: 1.0.0
 */
export type GetHealth200 = {
  ok: boolean;
  ts: string;
};

export type GetRecords200ItemContent = string | null;

export type GetRecords200Item = {
  id: string;
  title: string;
  content: GetRecords200ItemContent;
  createdAt: string;
  updatedAt: string;
};

export type CreateRecordBodyContent = string | null;

export type CreateRecordBody = {
  /** @minLength 1 */
  title: string;
  content?: CreateRecordBodyContent;
};

export type CreateRecord201Content = string | null;

export type CreateRecord201 = {
  id: string;
  title: string;
  content: CreateRecord201Content;
  createdAt: string;
  updatedAt: string;
};

export type UpdateRecordBodyContent = string | null;

export type UpdateRecordBody = {
  /** @minLength 1 */
  title?: string;
  content?: UpdateRecordBodyContent;
};

export type UpdateRecord200Content = string | null;

export type UpdateRecord200 = {
  id: string;
  title: string;
  content: UpdateRecord200Content;
  createdAt: string;
  updatedAt: string;
};

export type DeleteRecord200 = {
  ok: boolean;
};

/**
 * @summary Health check
 */
export type getHealthResponse200 = {
  data: GetHealth200
  status: 200
}
    
export type getHealthResponseSuccess = (getHealthResponse200) & {
  headers: Headers;
};
;

export type getHealthResponse = (getHealthResponseSuccess)

export const getGetHealthUrl = () => {


  

  return `/api/health`
}

export const getHealth = async ( options?: RequestInit): Promise<getHealthResponse> => {
  
  const res = await fetch(getGetHealthUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: getHealthResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as getHealthResponse
}



/**
 * @summary List records
 */
export type getRecordsResponse200 = {
  data: GetRecords200Item[]
  status: 200
}
    
export type getRecordsResponseSuccess = (getRecordsResponse200) & {
  headers: Headers;
};
;

export type getRecordsResponse = (getRecordsResponseSuccess)

export const getGetRecordsUrl = () => {


  

  return `/api/records`
}

export const getRecords = async ( options?: RequestInit): Promise<getRecordsResponse> => {
  
  const res = await fetch(getGetRecordsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: getRecordsResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as getRecordsResponse
}



/**
 * @summary Create record
 */
export type createRecordResponse201 = {
  data: CreateRecord201
  status: 201
}
    
export type createRecordResponseSuccess = (createRecordResponse201) & {
  headers: Headers;
};
;

export type createRecordResponse = (createRecordResponseSuccess)

export const getCreateRecordUrl = () => {


  

  return `/api/records`
}

export const createRecord = async (createRecordBody: CreateRecordBody, options?: RequestInit): Promise<createRecordResponse> => {
  
  const res = await fetch(getCreateRecordUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createRecordBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: createRecordResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as createRecordResponse
}



/**
 * @summary Update record
 */
export type updateRecordResponse200 = {
  data: UpdateRecord200
  status: 200
}
    
export type updateRecordResponseSuccess = (updateRecordResponse200) & {
  headers: Headers;
};
;

export type updateRecordResponse = (updateRecordResponseSuccess)

export const getUpdateRecordUrl = (id: string,) => {


  

  return `/api/records/${id}`
}

export const updateRecord = async (id: string,
    updateRecordBody: UpdateRecordBody, options?: RequestInit): Promise<updateRecordResponse> => {
  
  const res = await fetch(getUpdateRecordUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateRecordBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: updateRecordResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as updateRecordResponse
}



/**
 * @summary Delete record
 */
export type deleteRecordResponse200 = {
  data: DeleteRecord200
  status: 200
}
    
export type deleteRecordResponseSuccess = (deleteRecordResponse200) & {
  headers: Headers;
};
;

export type deleteRecordResponse = (deleteRecordResponseSuccess)

export const getDeleteRecordUrl = (id: string,) => {


  

  return `/api/records/${id}`
}

export const deleteRecord = async (id: string, options?: RequestInit): Promise<deleteRecordResponse> => {
  
  const res = await fetch(getDeleteRecordUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  
  const data: deleteRecordResponse['data'] = body ? JSON.parse(body) : {}
  return { data, status: res.status, headers: res.headers } as deleteRecordResponse
}
