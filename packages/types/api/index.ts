/* eslint-disable */
/* tslint:disable */
// This file was generated by orval. Do not edit manually.

export type HealthResponse = {
  ok: true;
  ts: string;
};

export type RecordItem = {
  id: string;
  title: string;
  content: string | null;
  createdAt: string;
  updatedAt: string;
};

export type CreateRecordRequest = {
  title: string;
  content?: string | null;
};

export type UpdateRecordRequest = {
  title?: string;
  content?: string | null;
};

export type DeleteRecordResponse = {
  ok: true;
};

type RequestOptions = Omit<RequestInit, 'body'> & {
  body?: RequestInit['body'];
};

async function apiFetch<TResponse>(input: RequestInfo, init: RequestOptions = {}): Promise<TResponse> {
  const hasBody = init.body !== undefined && init.body !== null;
  const headers = {
    ...(hasBody ? { 'content-type': 'application/json' } : {}),
    ...(init.headers || {}),
  };

  const response = await fetch(input, {
    credentials: 'include',
    ...init,
    headers,
  });

  if (response.status === 204) {
    return null as unknown as TResponse;
  }

  const text = await response.text();

  if (!response.ok) {
    try {
      const json = JSON.parse(text);
      throw new Error(json.error ?? json.message ?? response.statusText);
    } catch {
      throw new Error(text || response.statusText);
    }
  }

  return text ? (JSON.parse(text) as TResponse) : (null as unknown as TResponse);
}

export function getHealth(options?: RequestOptions): Promise<HealthResponse> {
  return apiFetch('/api/health', { method: 'GET', ...(options || {}) });
}

export function getRecords(options?: RequestOptions): Promise<RecordItem[]> {
  return apiFetch('/api/records', { method: 'GET', ...(options || {}) });
}

export function createRecord(
  body: CreateRecordRequest,
  options?: RequestOptions,
): Promise<RecordItem> {
  return apiFetch('/api/records', {
    method: 'POST',
    body: JSON.stringify(body),
    ...(options || {}),
  });
}

export function updateRecord(
  id: string,
  body: UpdateRecordRequest,
  options?: RequestOptions,
): Promise<RecordItem> {
  return apiFetch(`/api/records/${encodeURIComponent(id)}`, {
    method: 'PUT',
    body: JSON.stringify(body),
    ...(options || {}),
  });
}

export function deleteRecord(id: string, options?: RequestOptions): Promise<DeleteRecordResponse> {
  return apiFetch(`/api/records/${encodeURIComponent(id)}`, {
    method: 'DELETE',
    ...(options || {}),
  });
}
